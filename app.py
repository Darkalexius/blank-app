import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import time
import json

from data_fetcher import fetch_cryptocurrency_data, get_available_cryptocurrencies, fetch_current_prices
from crypto_analysis import identify_promising_cryptocurrencies, generate_signals
from technical_indicators import calculate_technical_indicators
from utils import format_currency, get_price_change_color, format_date
import database
from database import (
    save_price_history,
    save_technical_indicators,
    save_signal,
    save_user_preference,
    get_user_preference,
    get_recent_signals,
    get_price_history
)
from exchange_connector import (
    get_available_exchanges, initialize_exchange, save_exchange_credentials,
    get_exchange_credentials, get_account_balance, place_market_order, place_limit_order,
    get_order_status, cancel_order, get_open_orders, get_order_history, get_ticker,
    get_available_pairs, save_order_to_db, update_order_status_in_db, get_orders_from_db
)
from ai_advisor import analyze_crypto_data, generate_investment_strategy, get_market_sentiment, ask_ai_advisor
from ia_agent import IAAgent

# Initialiser l'agent IA
ia_agent = IAAgent()

# Configuration de la page
st.set_page_config(
    page_title="Analyse de Cryptomonnaies",
    page_icon="üìà",
    layout="wide",
)

# Titre et description
st.title("üìä Plateforme d'Analyse de Cryptomonnaies de Alexis Adinguera")
st.markdown("""
Cette application analyse les tendances des cryptomonnaies et identifie des opportunit√©s
d'investissement en g√©n√©rant des signaux d'achat et de vente bas√©s sur des indicateurs techniques.
""")

# Sidebar pour les options
st.sidebar.header("Options d'Analyse")

# S√©lection de la p√©riode
time_periods = {
    "24 heures": "1d",
    "7 jours": "7d",
    "30 jours": "30d",
    "90 jours": "90d"
}
selected_period = st.sidebar.selectbox(
    "P√©riode d'analyse",
    list(time_periods.keys()),
    index=1  # Default to 7 days
)

# Chargement des cryptomonnaies disponibles
try:
    available_cryptos = get_available_cryptocurrencies()
    
    # S√©lection des cryptomonnaies √† analyser
    default_cryptos = ["BTC", "ETH", "BNB", "XRP", "SOL"]
    selected_cryptos = st.sidebar.multiselect(
        "S√©lectionner les cryptomonnaies √† analyser",
        available_cryptos,
        default=default_cryptos
    )
    
    # Si aucune crypto n'est s√©lectionn√©e, utilisez les valeurs par d√©faut
    if not selected_cryptos:
        selected_cryptos = default_cryptos
        st.sidebar.warning("Aucune crypto s√©lectionn√©e, utilisation des valeurs par d√©faut.")

    # S√©lection des indicateurs techniques
    technical_indicators = st.sidebar.multiselect(
        "Indicateurs techniques",
        ["RSI", "MACD", "Bollinger Bands", "EMA", "SMA"],
        default=["RSI", "MACD"]
    )

    # Bouton pour actualiser les donn√©es
    if st.sidebar.button("Actualiser les donn√©es"):
        st.rerun()

    # Affichage du dernier rafra√Æchissement
    st.sidebar.text(f"Derni√®re mise √† jour: {datetime.now().strftime('%H:%M:%S')}")

    # Chargement et analyse des donn√©es
    with st.spinner("Chargement des donn√©es des cryptomonnaies..."):
        # Obtenir la p√©riode en jours
        period = time_periods[selected_period]
        
        # Variable pour d√©tecter si on utilise des donn√©es de d√©monstration
        using_demo_data = False
        
        # R√©cup√©rer les donn√©es pour chaque crypto s√©lectionn√©e
        all_crypto_data = {}
        for crypto in selected_cryptos:
            crypto_data = fetch_cryptocurrency_data(crypto, period)
            # V√©rifier si le DataFrame est vide
            if not crypto_data.empty:
                all_crypto_data[crypto] = crypto_data
                
                # V√©rifier si nous utilisons des donn√©es de d√©monstration (prix arrondis typiques des donn√©es g√©n√©r√©es)
                if abs(crypto_data['close'].iloc[-1] - round(crypto_data['close'].iloc[-1], 0)) < 0.0001:
                    using_demo_data = True
        
        # Identifier les cryptomonnaies prometteuses
        promising_cryptos = identify_promising_cryptocurrencies(all_crypto_data, technical_indicators)
        
        # G√©n√©rer les signaux
        signals = generate_signals(all_crypto_data, technical_indicators)
        
        # Avertissement pour les donn√©es de d√©monstration
        if using_demo_data:
            st.warning("""
            **Mode d√©monstration activ√©** : L'API CoinGecko a atteint sa limite de requ√™tes. 
            Nous utilisons des donn√©es de d√©monstration g√©n√©r√©es localement. 
            Ces donn√©es ne refl√®tent pas les prix r√©els du march√© mais vous permettent de continuer 
            √† explorer l'application. Veuillez r√©essayer plus tard pour obtenir des donn√©es en temps r√©el.
            """)
            
            # Ajouter une indication du temps estim√© avant que l'API soit √† nouveau disponible
            current_time = datetime.now()
            # CoinGecko limite √† 10-30 requ√™tes par minute pour les API gratuites
            next_available = current_time + timedelta(minutes=1)
            st.info(f"L'API devrait √™tre √† nouveau disponible vers {next_available.strftime('%H:%M')}.")

    # Tableau de bord principal
    col1, col2 = st.columns([2, 1])

    with col1:
        st.header("Aper√ßu du March√©")
        
        # Cr√©er un dataframe pour le tableau de march√©
        market_data = []
        for crypto, data in all_crypto_data.items():
            if not data.empty:
                current_price = data['close'].iloc[-1]
                price_24h_ago = data['close'].iloc[-24] if len(data) > 24 else data['close'].iloc[0]
                change_24h = ((current_price - price_24h_ago) / price_24h_ago) * 100
                
                market_data.append({
                    "Crypto": crypto,
                    "Prix Actuel": format_currency(current_price),
                    "Changement (24h)": f"{change_24h:.2f}%",
                    "Volume (24h)": format_currency(data['volume'].iloc[-1]),
                    "Signal": signals[crypto]['signal'] if crypto in signals else "Neutre"
                })
        
        market_df = pd.DataFrame(market_data)
        
        # Appliquer une couleur conditionnelle
        def color_change(val):
            if "%" in str(val):
                try:
                    value = float(val.replace("%", ""))
                    if value > 0:
                        return 'background-color: rgba(0, 255, 0, 0.2)'
                    elif value < 0:
                        return 'background-color: rgba(255, 0, 0, 0.2)'
                except:
                    pass
            return ''
        
        def color_signal(val):
            if val == "Achat":
                return 'background-color: rgba(0, 255, 0, 0.3); color: darkgreen; font-weight: bold'
            elif val == "Vente":
                return 'background-color: rgba(255, 0, 0, 0.3); color: darkred; font-weight: bold'
            return ''
        
        # Afficher le tableau avec mise en forme
        st.dataframe(
            market_df.style
            .map(color_change, subset=['Changement (24h)'])
            .map(color_signal, subset=['Signal'])
        )

    with col2:
        st.header("Cryptomonnaies Prometteuses")
        
        if promising_cryptos:
            for idx, (crypto, score) in enumerate(promising_cryptos):
                st.markdown(f"**{idx+1}. {crypto}** - Score: {score:.2f}")
                if crypto in signals:
                    signal_color = "green" if signals[crypto]['signal'] == "Achat" else "red" if signals[crypto]['signal'] == "Vente" else "gray"
                    st.markdown(f"<span style='color:{signal_color};font-weight:bold;'>{signals[crypto]['signal']}</span> - {signals[crypto]['reason']}", unsafe_allow_html=True)
        else:
            st.info("Aucune cryptomonnaie particuli√®rement prometteuse n'a √©t√© identifi√©e pour le moment.")

    # Cr√©ation des onglets principaux pour l'application
    main_tabs = st.tabs(["Analyse Graphique", "Trading", "Historique des Signaux", "Base de Donn√©es", "Conseiller IA", "Agent IA"])
    
    with main_tabs[0]:
        st.header("Analyse Graphique")
    
    selected_crypto_for_chart = st.selectbox(
        "S√©lectionner une cryptomonnaie pour l'analyse graphique",
        selected_cryptos,
        key="crypto_chart_selector_main"
    )
    
    if selected_crypto_for_chart in all_crypto_data:
        df = all_crypto_data[selected_crypto_for_chart]
        
        if not df.empty:
            # Calculer les indicateurs techniques pour cette crypto
            df_with_indicators = calculate_technical_indicators(df)
            
            # Cr√©er un onglet pour chaque type de graphique
            chart_tabs = st.tabs(["Prix", "Volume", "Indicateurs Techniques"])
            
            with chart_tabs[0]:
                # Graphique des prix
                fig = go.Figure()
                
                fig.add_trace(go.Candlestick(
                    x=df.index,
                    open=df['open'],
                    high=df['high'],
                    low=df['low'],
                    close=df['close'],
                    name="Prix"
                ))
                
                # Ajouter les moyennes mobiles si disponibles
                if 'EMA_20' in df_with_indicators.columns:
                    fig.add_trace(go.Scatter(
                        x=df_with_indicators.index,
                        y=df_with_indicators['EMA_20'],
                        mode='lines',
                        name='EMA 20'
                    ))
                
                if 'SMA_50' in df_with_indicators.columns:
                    fig.add_trace(go.Scatter(
                        x=df_with_indicators.index,
                        y=df_with_indicators['SMA_50'],
                        mode='lines',
                        name='SMA 50'
                    ))
                
                # Ajouter les bandes de Bollinger si disponibles
                if 'BB_upper' in df_with_indicators.columns:
                    fig.add_trace(go.Scatter(
                        x=df_with_indicators.index,
                        y=df_with_indicators['BB_upper'],
                        mode='lines',
                        line=dict(width=0.5, color='rgba(100, 100, 100, 0.3)'),
                        name='BB Upper'
                    ))
                    
                    fig.add_trace(go.Scatter(
                        x=df_with_indicators.index,
                        y=df_with_indicators['BB_lower'],
                        mode='lines',
                        line=dict(width=0.5, color='rgba(100, 100, 100, 0.3)'),
                        fill='tonexty',
                        fillcolor='rgba(100, 100, 100, 0.1)',
                        name='BB Lower'
                    ))
                
                # Ajouter des marqueurs pour les signaux si disponibles
                if selected_crypto_for_chart in signals:
                    if signals[selected_crypto_for_chart]['signal'] == "Achat":
                        buy_points = df_with_indicators[df_with_indicators['signal'] == 1]
                        fig.add_trace(go.Scatter(
                            x=buy_points.index,
                            y=buy_points['close'],
                            mode='markers',
                            marker=dict(size=10, color='green', symbol='triangle-up'),
                            name='Signal d\'achat'
                        ))
                    elif signals[selected_crypto_for_chart]['signal'] == "Vente":
                        sell_points = df_with_indicators[df_with_indicators['signal'] == -1]
                        fig.add_trace(go.Scatter(
                            x=sell_points.index,
                            y=sell_points['close'],
                            mode='markers',
                            marker=dict(size=10, color='red', symbol='triangle-down'),
                            name='Signal de vente'
                        ))
                
                fig.update_layout(
                    title=f"{selected_crypto_for_chart} - √âvolution du Prix",
                    xaxis_title="Date",
                    yaxis_title="Prix (USD)",
                    height=600,
                    xaxis_rangeslider_visible=False
                )
                
                st.plotly_chart(fig, use_container_width=True)
            
            with chart_tabs[1]:
                # Graphique du volume
                fig = go.Figure()
                
                fig.add_trace(go.Bar(
                    x=df.index,
                    y=df['volume'],
                    name="Volume"
                ))
                
                fig.update_layout(
                    title=f"{selected_crypto_for_chart} - Volume d'√©changes",
                    xaxis_title="Date",
                    yaxis_title="Volume (USD)",
                    height=400
                )
                
                st.plotly_chart(fig, use_container_width=True)
            
            with chart_tabs[2]:
                # Graphiques des indicateurs techniques
                indicator_tabs = st.tabs([indicator for indicator in technical_indicators if indicator in ["RSI", "MACD", "Bollinger Bands"]])
                
                for i, indicator in enumerate([ind for ind in technical_indicators if ind in ["RSI", "MACD", "Bollinger Bands"]]):
                    with indicator_tabs[i]:
                        if indicator == "RSI" and "RSI" in df_with_indicators.columns:
                            fig = go.Figure()
                            
                            fig.add_trace(go.Scatter(
                                x=df_with_indicators.index,
                                y=df_with_indicators['RSI'],
                                mode='lines',
                                name='RSI'
                            ))
                            
                            # Ajouter des lignes horizontales pour les niveaux de survente et surachat
                            fig.add_shape(
                                type="line",
                                x0=df_with_indicators.index[0],
                                y0=70,
                                x1=df_with_indicators.index[-1],
                                y1=70,
                                line=dict(color="red", width=2, dash="dash")
                            )
                            
                            fig.add_shape(
                                type="line",
                                x0=df_with_indicators.index[0],
                                y0=30,
                                x1=df_with_indicators.index[-1],
                                y1=30,
                                line=dict(color="green", width=2, dash="dash")
                            )
                            
                            fig.update_layout(
                                title=f"{selected_crypto_for_chart} - RSI (Relative Strength Index)",
                                xaxis_title="Date",
                                yaxis_title="RSI",
                                height=400,
                                yaxis=dict(range=[0, 100])
                            )
                            
                            st.plotly_chart(fig, use_container_width=True)
                            
                            st.markdown("""
                            **Interpr√©tation du RSI:**
                            - **RSI > 70:** Le march√© est potentiellement en surachat (signal de vente)
                            - **RSI < 30:** Le march√© est potentiellement en survente (signal d'achat)
                            """)
                            
                        elif indicator == "MACD" and all(x in df_with_indicators.columns for x in ['MACD', 'MACD_signal', 'MACD_hist']):
                            fig = make_subplots(specs=[[{"secondary_y": True}]])
                            
                            fig.add_trace(
                                go.Scatter(
                                    x=df_with_indicators.index,
                                    y=df_with_indicators['MACD'],
                                    mode='lines',
                                    name='MACD'
                                )
                            )
                            
                            fig.add_trace(
                                go.Scatter(
                                    x=df_with_indicators.index,
                                    y=df_with_indicators['MACD_signal'],
                                    mode='lines',
                                    name='Signal'
                                )
                            )
                            
                            fig.add_trace(
                                go.Bar(
                                    x=df_with_indicators.index,
                                    y=df_with_indicators['MACD_hist'],
                                    name='Histogramme',
                                    marker_color=df_with_indicators['MACD_hist'].apply(
                                        lambda x: 'green' if x > 0 else 'red'
                                    )
                                ),
                                secondary_y=True
                            )
                            
                            fig.update_layout(
                                title=f"{selected_crypto_for_chart} - MACD (Moving Average Convergence Divergence)",
                                xaxis_title="Date",
                                height=400
                            )
                            
                            fig.update_yaxes(title_text="MACD & Signal", secondary_y=False)
                            fig.update_yaxes(title_text="Histogramme", secondary_y=True)
                            
                            st.plotly_chart(fig, use_container_width=True)
                            
                            st.markdown("""
                            **Interpr√©tation du MACD:**
                            - **MACD croise au-dessus du signal:** Signal d'achat potentiel
                            - **MACD croise en-dessous du signal:** Signal de vente potentiel
                            - **Histogramme positif (vert):** Tendance haussi√®re
                            - **Histogramme n√©gatif (rouge):** Tendance baissi√®re
                            """)
                            
                        elif indicator == "Bollinger Bands" and all(x in df_with_indicators.columns for x in ['BB_upper', 'BB_middle', 'BB_lower']):
                            fig = go.Figure()
                            
                            fig.add_trace(go.Scatter(
                                x=df_with_indicators.index,
                                y=df_with_indicators['close'],
                                mode='lines',
                                name='Prix de cl√¥ture'
                            ))
                            
                            fig.add_trace(go.Scatter(
                                x=df_with_indicators.index,
                                y=df_with_indicators['BB_upper'],
                                mode='lines',
                                line=dict(width=1, color='rgba(100, 100, 100, 0.8)'),
                                name='Bande sup√©rieure'
                            ))
                            
                            fig.add_trace(go.Scatter(
                                x=df_with_indicators.index,
                                y=df_with_indicators['BB_middle'],
                                mode='lines',
                                line=dict(width=1, color='rgba(100, 100, 100, 0.5)'),
                                name='Moyenne mobile'
                            ))
                            
                            fig.add_trace(go.Scatter(
                                x=df_with_indicators.index,
                                y=df_with_indicators['BB_lower'],
                                mode='lines',
                                line=dict(width=1, color='rgba(100, 100, 100, 0.8)'),
                                fill='tonexty',
                                fillcolor='rgba(100, 100, 100, 0.1)',
                                name='Bande inf√©rieure'
                            ))
                            
                            fig.update_layout(
                                title=f"{selected_crypto_for_chart} - Bandes de Bollinger",
                                xaxis_title="Date",
                                yaxis_title="Prix (USD)",
                                height=400
                            )
                            
                            st.plotly_chart(fig, use_container_width=True)
                            
                            st.markdown("""
                            **Interpr√©tation des Bandes de Bollinger:**
                            - **Prix proche de la bande sup√©rieure:** March√© potentiellement sur√©valu√©
                            - **Prix proche de la bande inf√©rieure:** March√© potentiellement sous-√©valu√©
                            - **Bandes qui se resserrent:** Pr√©paration √† un mouvement de prix significatif
                            - **Bandes qui s'√©largissent:** Volatilit√© accrue
                            """)
        else:
            st.error(f"Aucune donn√©e disponible pour {selected_crypto_for_chart}")

    # Section Analyse et Conseils
    st.header("Analyse et Conseils")
    
    # Afficher les signaux avec explications d√©taill√©es
    for crypto, signal_info in signals.items():
        if crypto in selected_cryptos:
            signal_color = "green" if signal_info['signal'] == "Achat" else "red" if signal_info['signal'] == "Vente" else "gray"
            st.markdown(f"### {crypto}: <span style='color:{signal_color};'>{signal_info['signal']}</span>", unsafe_allow_html=True)
            
            st.markdown(f"**Raison:** {signal_info['reason']}")
            
            if 'details' in signal_info and signal_info['details']:
                with st.expander("D√©tails de l'analyse"):
                    for key, value in signal_info['details'].items():
                        st.markdown(f"- **{key}:** {value}")
            
            if 'advice' in signal_info:
                st.markdown(f"**Conseil:** {signal_info['advice']}")
            
            st.markdown("---")

    # Bas de page avec informations de non-responsabilit√©
    st.markdown("---")
    st.caption("""
    **Avertissement:** Cette application est fournie √† titre informatif uniquement. Les signaux 
    g√©n√©r√©s ne constituent pas des conseils d'investissement. Les investissements en cryptomonnaies 
    comportent des risques. Faites vos propres recherches avant d'investir.
    """)

    # Sauvegarde dans la base de donn√©es
    # 1. Sauvegarde des prix historiques et indicateurs techniques
    for crypto, df in all_crypto_data.items():
        if not df.empty:
            # Sauvegarder l'historique des prix
            save_price_history(crypto, df)
            
            # Calculer et sauvegarder les indicateurs techniques
            df_with_indicators = calculate_technical_indicators(df)
            save_technical_indicators(crypto, df_with_indicators)
    
    # 2. Sauvegarde des signaux g√©n√©r√©s
    for crypto, signal_info in signals.items():
        if crypto in selected_cryptos:
            # D√©tails des indicateurs pour ce signal
            indicators_data = {}
            if 'details' in signal_info and signal_info['details']:
                indicators_data = signal_info['details']
            
            # Prix actuel pour cette crypto
            current_price = None
            if crypto in all_crypto_data and not all_crypto_data[crypto].empty:
                current_price = all_crypto_data[crypto]['close'].iloc[-1]
            
            # Sauvegarder le signal
            save_signal(
                symbol=crypto,
                signal_type=signal_info['signal'].lower(),
                reason=signal_info['reason'],
                indicators_data=indicators_data,
                price_at_signal=current_price
            )
    
    # 3. Sauvegarde des pr√©f√©rences utilisateur
    save_user_preference("selected_period", selected_period)
    save_user_preference("selected_cryptos", ",".join(selected_cryptos))
    save_user_preference("selected_indicators", ",".join(technical_indicators))
    
    # Contenu de l'onglet d'analyse graphique
    with main_tabs[0]:
        st.header("Analyse Graphique")
        
        selected_crypto_for_chart = st.selectbox(
            "S√©lectionner une cryptomonnaie pour l'analyse graphique",
            selected_cryptos,
            key="crypto_chart_selector_tab"
        )
        
        if selected_crypto_for_chart in all_crypto_data:
            df = all_crypto_data[selected_crypto_for_chart]
            
            if not df.empty:
                # Calculer les indicateurs techniques pour cette crypto
                df_with_indicators = calculate_technical_indicators(df)
                
                # Cr√©er un onglet pour chaque type de graphique
                chart_tabs = st.tabs(["Prix", "Volume", "Indicateurs Techniques"])
                
                # [Le reste du code pour l'analyse graphique reste inchang√©]
    
    # Afficher les donn√©es de la base de donn√©es dans les onglets appropri√©s
    with main_tabs[1]:
        st.header("Trading")
        
        # S√©lection de l'√©change de crypto-monnaies
        exchanges = get_available_exchanges()
        selected_exchange = st.selectbox(
            "Choisir un √©change",
            exchanges,
            index=0,
            key="exchange_selector"
        )
        
        # Afficher des informations sur l'√©change s√©lectionn√©
        st.info(f"Vous avez s√©lectionn√© l'√©change {selected_exchange}.")
        
        # Configuration de l'API
        api_key_provided = False
        
        with st.expander("Configuration de l'API"):
            saved_api_key, saved_api_secret = get_exchange_credentials(selected_exchange)
            
            if saved_api_key and saved_api_secret:
                st.success("Informations d'API d√©j√† configur√©es.")
                api_key_provided = True
                if st.button("Modifier les informations d'API"):
                    saved_api_key, saved_api_secret = None, None
            
            if not (saved_api_key and saved_api_secret):
                with st.form("api_keys_form"):
                    api_key = st.text_input("Cl√© API", type="password")
                    api_secret = st.text_input("Secret API", type="password")
                    test_mode = st.checkbox("Mode Test (Sandbox)", value=True)
                    submit_button = st.form_submit_button("Sauvegarder")
                    
                if submit_button:
                    if api_key and api_secret:
                        save_exchange_credentials(selected_exchange, api_key, api_secret)
                        st.success("Informations d'API sauvegard√©es avec succ√®s!")
                        api_key_provided = True
                        st.rerun()
                    else:
                        st.error("Veuillez fournir une cl√© API et un secret API.")
                
                if st.button("Sauvegarder"):
                    if api_key and api_secret:
                        save_exchange_credentials(selected_exchange, api_key, api_secret)
                        st.success("Informations d'API sauvegard√©es avec succ√®s!")
                        api_key_provided = True
                        st.rerun()
                    else:
                        st.error("Veuillez fournir une cl√© API et un secret API.")
        
        # Initialisation de l'√©change
        exchange = None
        if api_key_provided:
            with st.spinner("Connexion √† l'√©change..."):
                api_key, api_secret = get_exchange_credentials(selected_exchange)
                exchange = initialize_exchange(selected_exchange, api_key, api_secret, test_mode=True)
                
                if exchange:
                    st.success(f"Connect√© avec succ√®s √† {selected_exchange}!")
                    
                    # Afficher le solde du compte
                    try:
                        st.subheader("Solde du compte")
                        balances = get_account_balance(exchange)
                        
                        if balances:
                            # Filtrer les soldes non-nuls
                            non_zero_balances = {k: v for k, v in balances.items() if v > 0}
                            
                            # Cr√©er un DataFrame √† partir des soldes
                            balance_data = [{"Devise": k, "Solde": v} for k, v in non_zero_balances.items()]
                            balance_df = pd.DataFrame(balance_data)
                            
                            if not balance_df.empty:
                                st.dataframe(balance_df, use_container_width=True)
                            else:
                                st.info("Aucun solde disponible.")
                        else:
                            st.info("Impossible de r√©cup√©rer les soldes.")
                    except Exception as e:
                        st.error(f"Erreur lors de la r√©cup√©ration des soldes: {str(e)}")
                    
                    # Interface de trading
                    st.subheader("Passer un ordre")
                    
                    # R√©cup√©rer les paires disponibles
                    try:
                        available_pairs = get_available_pairs(exchange)
                        
                        if available_pairs:
                            # S√©lectionner une paire
                            selected_pair = st.selectbox(
                                "Choisir une paire",
                                available_pairs,
                                index=0 if available_pairs else None,
                                key="pair_selector"
                            )
                            
                            # Obtenir des informations sur la paire s√©lectionn√©e
                            if selected_pair:
                                ticker_info = get_ticker(exchange, selected_pair)
                                
                                if ticker_info:
                                    current_price = ticker_info.get('last', 0)
                                    st.metric(
                                        "Prix Actuel",
                                        f"{current_price:.2f} {selected_pair.split('/')[-1]}",
                                        delta=f"{ticker_info.get('percentage', 0):.2f}%" if 'percentage' in ticker_info else None
                                    )
                                
                                # Type d'ordre
                                order_type = st.radio("Type d'ordre", ["Market", "Limit"], horizontal=True)
                                side = st.radio("C√¥t√©", ["Achat", "Vente"], horizontal=True)
                                
                                # Quantit√©
                                amount = st.number_input("Quantit√©", min_value=0.0, format="%.8f")
                                
                                # Prix limite (uniquement pour les ordres limites)
                                price = None
                                if order_type == "Limit":
                                    # D√©finir une valeur par d√©faut pour le prix limite
                                    default_price = float(ticker_info.get('last', 0)) if ticker_info and 'last' in ticker_info else 0.0
                                    price = st.number_input(
                                        "Prix Limite",
                                        min_value=0.0,
                                        value=default_price,
                                        format="%.8f"
                                    )
                                
                                # Confirmation de l'ordre
                                if st.button("Passer l'ordre"):
                                    if amount <= 0:
                                        st.error("Veuillez sp√©cifier une quantit√© valide.")
                                    else:
                                        with st.spinner("Traitement de l'ordre..."):
                                            try:
                                                side_api = "buy" if side == "Achat" else "sell"
                                                
                                                if order_type == "Market":
                                                    order = place_market_order(exchange, selected_pair, side_api, amount)
                                                else:  # Limit
                                                    if price and price > 0:
                                                        order = place_limit_order(exchange, selected_pair, side_api, amount, price)
                                                    else:
                                                        st.error("Veuillez sp√©cifier un prix limite valide.")
                                                        order = None
                                                
                                                if order:
                                                    st.success(f"Ordre plac√© avec succ√®s: {order.get('id', 'N/A')}")
                                                    # Sauvegarder l'ordre dans la base de donn√©es
                                                    save_order_to_db(selected_exchange, order)
                                                    # Recharger la page pour afficher le nouvel ordre
                                                    st.rerun()
                                                else:
                                                    st.error("√âchec de l'ordre. V√©rifiez les param√®tres et r√©essayez.")
                                            except Exception as e:
                                                st.error(f"Erreur lors du placement de l'ordre: {str(e)}")
                            
                            # Afficher les ordres en cours
                            st.subheader("Ordres en cours")
                            try:
                                open_orders = get_open_orders(exchange, selected_pair)
                                
                                if open_orders:
                                    # Cr√©er un DataFrame √† partir des ordres ouverts
                                    orders_data = []
                                    for order in open_orders:
                                        orders_data.append({
                                            "ID": order.get('id', 'N/A'),
                                            "Paire": order.get('symbol', 'N/A'),
                                            "Type": order.get('type', 'N/A'),
                                            "C√¥t√©": order.get('side', 'N/A'),
                                            "Quantit√©": order.get('amount', 0),
                                            "Prix": order.get('price', 0) if order.get('price') else "Market",
                                            "Statut": order.get('status', 'N/A'),
                                            "Date": format_date(order.get('timestamp', 0)/1000) if order.get('timestamp') else 'N/A'
                                        })
                                    
                                    orders_df = pd.DataFrame(orders_data)
                                    st.dataframe(orders_df, use_container_width=True)
                                    
                                    # Option d'annulation d'ordre
                                    if not orders_df.empty:
                                        selected_order_id = st.selectbox("S√©lectionner un ordre √† annuler", orders_df["ID"].tolist(), key="cancel_order_selector")
                                        if st.button("Annuler l'ordre"):
                                            with st.spinner("Annulation de l'ordre..."):
                                                try:
                                                    cancel_result = cancel_order(exchange, selected_order_id, selected_pair)
                                                    if cancel_result:
                                                        st.success(f"Ordre {selected_order_id} annul√© avec succ√®s!")
                                                        # Mettre √† jour le statut de l'ordre dans la base de donn√©es
                                                        update_order_status_in_db(selected_exchange, selected_order_id, "canceled")
                                                        # Recharger la page
                                                        st.rerun()
                                                    else:
                                                        st.error("√âchec de l'annulation de l'ordre.")
                                                except Exception as e:
                                                    st.error(f"Erreur lors de l'annulation de l'ordre: {str(e)}")
                                else:
                                    st.info("Aucun ordre en cours.")
                            except Exception as e:
                                st.error(f"Erreur lors de la r√©cup√©ration des ordres en cours: {str(e)}")
                            
                            # Historique des ordres
                            st.subheader("Historique des ordres")
                            try:
                                # R√©cup√©rer l'historique des ordres depuis la base de donn√©es
                                orders_history = get_orders_from_db(exchange_id=selected_exchange, symbol=selected_pair, limit=20)
                                
                                if orders_history:
                                    # Cr√©er un DataFrame √† partir de l'historique des ordres
                                    history_data = []
                                    for order in orders_history:
                                        history_data.append({
                                            "ID": order.order_id,
                                            "Paire": order.symbol,
                                            "Type": order.type,
                                            "C√¥t√©": order.side,
                                            "Quantit√©": order.amount,
                                            "Prix": order.price if order.price else "Market",
                                            "Statut": order.status,
                                            "Date": format_date(order.timestamp)
                                        })
                                    
                                    history_df = pd.DataFrame(history_data)
                                    st.dataframe(history_df, use_container_width=True)
                                else:
                                    st.info("Aucun historique d'ordre disponible.")
                            except Exception as e:
                                st.error(f"Erreur lors de la r√©cup√©ration de l'historique des ordres: {str(e)}")
                        else:
                            st.error("Impossible de r√©cup√©rer les paires disponibles.")
                    except Exception as e:
                        st.error(f"Erreur lors de la r√©cup√©ration des paires disponibles: {str(e)}")
                else:
                    st.error(f"Impossible de se connecter √† {selected_exchange}. V√©rifiez vos informations d'API.")
        else:
            st.info("Veuillez configurer vos informations d'API pour commencer √† trader.")
            
    with main_tabs[2]:
        st.header("Historique des Signaux")
        
        # R√©cup√©rer les signaux r√©cents
        recent_signals = get_recent_signals(limit=20)
        
        if recent_signals:
            # Cr√©er un DataFrame pour afficher les signaux
            signals_data = []
            for signal in recent_signals:
                signal_info = {
                    "Cryptomonnaie": signal.symbol,
                    "Date": signal.timestamp.strftime("%d/%m/%Y %H:%M"),
                    "Type": signal.signal_type.capitalize(),
                    "Raison": signal.reason,
                    "Prix": f"${signal.price_at_signal:.2f}" if signal.price_at_signal else "N/A"
                }
                signals_data.append(signal_info)
            
            signals_df = pd.DataFrame(signals_data)
            
            # Fonction pour colorer les types de signaux
            def color_signal_type(val):
                if val == "Achat":
                    return 'background-color: rgba(0, 255, 0, 0.3); color: darkgreen; font-weight: bold'
                elif val == "Vente":
                    return 'background-color: rgba(255, 0, 0, 0.3); color: darkred; font-weight: bold'
                elif val == "Neutre":
                    return 'background-color: rgba(100, 100, 100, 0.2); color: gray'
                return ''
            
            # Afficher le tableau avec mise en forme
            st.dataframe(
                signals_df.style
                .map(color_signal_type, subset=['Type'])
            )
            
            # S√©lectionner un signal pour voir plus de d√©tails
            if signals_df.shape[0] > 0:
                selected_signal_idx = st.selectbox(
                    "S√©lectionner un signal pour voir les d√©tails",
                    range(len(recent_signals)),
                    format_func=lambda i: f"{recent_signals[i].symbol} - {recent_signals[i].timestamp.strftime('%d/%m/%Y %H:%M')} - {recent_signals[i].signal_type.capitalize()}",
                    key="signal_details_selector"
                )
                
                selected_signal = recent_signals[selected_signal_idx]
                
                st.subheader(f"D√©tails du signal pour {selected_signal.symbol}")
                st.write(f"**Type:** {selected_signal.signal_type.capitalize()}")
                st.write(f"**Date:** {selected_signal.timestamp.strftime('%d/%m/%Y %H:%M')}")
                st.write(f"**Raison:** {selected_signal.reason}")
                st.write(f"**Prix au moment du signal:** ${selected_signal.price_at_signal:.2f}" if selected_signal.price_at_signal else "**Prix au moment du signal:** N/A")
                
                # Afficher les donn√©es d'indicateurs si disponibles
                if selected_signal.indicators_data:
                    st.subheader("Indicateurs techniques")
                    indicators = json.loads(selected_signal.indicators_data) if isinstance(selected_signal.indicators_data, str) else selected_signal.indicators_data
                    for key, value in indicators.items():
                        st.write(f"**{key}:** {value}")
        else:
            st.info("Aucun signal n'a encore √©t√© enregistr√© dans la base de donn√©es.")
    
    with main_tabs[3]:
        st.header("Gestion de la Base de Donn√©es")
        
        # Options de gestion
        db_tabs = st.tabs(["Pr√©f√©rences Utilisateur", "Statistiques", "Configuration"])
        
        with db_tabs[0]:
            st.subheader("Pr√©f√©rences Utilisateur")
            
            # Afficher les pr√©f√©rences sauvegard√©es
            period_pref = get_user_preference("selected_period", "7 jours")
            cryptos_pref = get_user_preference("selected_cryptos", "BTC,ETH,BNB")
            indicators_pref = get_user_preference("selected_indicators", "RSI,MACD")
            
            st.write(f"**P√©riode d'analyse pr√©f√©r√©e:** {period_pref}")
            st.write(f"**Cryptomonnaies favorites:** {cryptos_pref}")
            st.write(f"**Indicateurs pr√©f√©r√©s:** {indicators_pref}")
            
            # Option pour r√©initialiser les pr√©f√©rences
            if st.button("R√©initialiser les pr√©f√©rences"):
                save_user_preference("selected_period", "7 jours")
                save_user_preference("selected_cryptos", "BTC,ETH,BNB,XRP,SOL")
                save_user_preference("selected_indicators", "RSI,MACD")
                st.success("Pr√©f√©rences r√©initialis√©es avec succ√®s!")
                st.rerun()
        
        with db_tabs[1]:
            st.subheader("Statistiques de la Base de Donn√©es")
            
            # R√©cup√©rer les statistiques sur les signaux
            session = database.Session()
            
            try:
                # Compter les signaux par type
                achat_count = session.query(database.Signal).filter(database.Signal.signal_type == "achat").count()
                vente_count = session.query(database.Signal).filter(database.Signal.signal_type == "vente").count()
                neutre_count = session.query(database.Signal).filter(database.Signal.signal_type == "neutre").count()
                
                # Compter les entr√©es dans les autres tables
                price_count = session.query(database.PriceHistory).count()
                indicator_count = session.query(database.TechnicalIndicator).count()
                
                # Afficher les statistiques
                col1, col2, col3 = st.columns(3)
                col1.metric("Signaux d'achat", achat_count)
                col2.metric("Signaux de vente", vente_count)
                col3.metric("Signaux neutres", neutre_count)
                
                st.metric("Entr√©es d'historique de prix", price_count)
                st.metric("Entr√©es d'indicateurs techniques", indicator_count)
                
                # Graphique des signaux par type
                fig = go.Figure(data=[
                    go.Bar(name='Signaux par type', 
                           x=['Achat', 'Vente', 'Neutre'], 
                           y=[achat_count, vente_count, neutre_count],
                           marker_color=['green', 'red', 'gray'])
                ])
                fig.update_layout(title="Distribution des signaux par type")
                st.plotly_chart(fig, use_container_width=True)
                
            except Exception as e:
                st.error(f"Erreur lors de la r√©cup√©ration des statistiques: {e}")
            
            finally:
                session.close()
        
        with db_tabs[2]:
            st.subheader("Configuration de la Base de Donn√©es")
            
            st.info("La base de donn√©es SQLite est actuellement utilis√©e et stock√©e localement.")
            
            # Option pour nettoyer les anciennes donn√©es
            if st.button("Nettoyer les donn√©es anciennes (> 90 jours)"):
                session = database.Session()
                try:
                    cutoff_date = datetime.now() - timedelta(days=90)
                    
                    # Supprimer les anciennes donn√©es de prix
                    deleted_prices = session.query(database.PriceHistory).filter(database.PriceHistory.timestamp < cutoff_date).delete()
                    
                    # Supprimer les anciens indicateurs
                    deleted_indicators = session.query(database.TechnicalIndicator).filter(database.TechnicalIndicator.timestamp < cutoff_date).delete()
                    
                    # Supprimer les anciens signaux
                    deleted_signals = session.query(database.Signal).filter(database.Signal.timestamp < cutoff_date).delete()
                    
                    session.commit()
                    
                    st.success(f"Nettoyage termin√©! Supprim√©: {deleted_prices} donn√©es de prix, {deleted_indicators} indicateurs techniques, {deleted_signals} signaux.")
                    
                except Exception as e:
                    session.rollback()
                    st.error(f"Erreur lors du nettoyage de la base de donn√©es: {e}")
                
                finally:
                    session.close()
    
    with main_tabs[4]:
        st.header("Conseiller IA")

    with main_tabs[5]:
        st.header("Agent IA")
        
        # Interface d'authentification
        with st.expander("Authentification Agent IA", expanded=True):
            password = st.text_input("Mot de passe", type="password")
            auth_button = st.button("S'authentifier")
            
            if auth_button:
                if ia_agent.authenticate(password):
                    st.session_state.agent_authenticated = True
                    st.success("Authentification r√©ussie!")
                else:
                    st.error("Mot de passe incorrect")
        
        # Interface de l'agent si authentifi√©
        if st.session_state.get('agent_authenticated', False):
            user_query = st.text_area("Votre question", height=100)
            context = st.text_area("Contexte (optionnel)", height=100)
            
            if st.button("Envoyer"):
                if user_query:
                    with st.spinner("Traitement de votre demande..."):
                        response = ia_agent.process_query(user_query, context if context else None)
                        
                        st.markdown("### R√©ponse:")
                        st.write(response["response"])
                        st.caption(f"Type de requ√™te: {response['type']}")
                        st.caption(f"G√©n√©r√© le {datetime.fromisoformat(response['timestamp']).strftime('%d/%m/%Y √† %H:%M')}")
            
            # Afficher l'historique des conversations
            with st.expander("Historique des conversations"):
                for message in ia_agent.get_conversation_history():
                    role_color = "blue" if message["role"] == "assistant" else "green"
                    st.markdown(f"**{message['role'].capitalize()}** :")
                    st.markdown(f"<div style='color: {role_color};'>{message['content']}</div>", unsafe_allow_html=True)
                    st.caption(f"Le {datetime.fromisoformat(message['timestamp']).strftime('%d/%m/%Y √† %H:%M')}")
                    st.markdown("---")
        
        st.markdown("""
        Notre conseiller IA utilise l'intelligence artificielle d'OpenAI pour analyser les donn√©es de march√©
        et vous fournir des recommandations d'investissement personnalis√©es.
        """)
        
        ai_tabs = st.tabs(["Analyse de Cryptomonnaie", "Sentiment du March√©", "Strat√©gie d'Investissement", "Questions & R√©ponses"])
        
        with ai_tabs[0]:
            st.subheader("Analyse de Cryptomonnaie par IA")
            
            # S√©lection de la crypto √† analyser
            crypto_to_analyze = st.selectbox(
                "S√©lectionner une cryptomonnaie √† analyser",
                selected_cryptos,
                key="ai_crypto_selector"
            )
            
            if crypto_to_analyze in all_crypto_data:
                # Pr√©paration des donn√©es pour l'analyse IA
                df = all_crypto_data[crypto_to_analyze]
                
                if not df.empty:
                    # Calcul des indicateurs techniques
                    df_with_indicators = calculate_technical_indicators(df)
                    
                    # Pr√©paration des donn√©es pour l'IA
                    crypto_data = {
                        "symbol": crypto_to_analyze,
                        "current_price": float(df['close'].iloc[-1]),
                        "price_change_percentage_24h": float(((df['close'].iloc[-1] - df['close'].iloc[-24]) / df['close'].iloc[-24]) * 100) if len(df) > 24 else 0,
                        "price_change_percentage_7d": float(((df['close'].iloc[-1] - df['close'].iloc[0]) / df['close'].iloc[0]) * 100),
                        "market_cap": float(df['close'].iloc[-1] * df['volume'].iloc[-1] / 1000),  # Estimation simplifi√©e
                        "total_volume": float(df['volume'].iloc[-1])
                    }
                    
                    # Extraction des indicateurs techniques
                    technical_data = {}
                    for indicator in ['RSI', 'MACD', 'MACD_signal', 'BB_upper', 'BB_middle', 'BB_lower']:
                        if indicator in df_with_indicators.columns:
                            technical_data[indicator] = float(df_with_indicators[indicator].iloc[-1])
                    
                    # Ajouter signal existant s'il est disponible
                    if crypto_to_analyze in signals:
                        technical_data["signal_existant"] = signals[crypto_to_analyze]['signal']
                        technical_data["raison_signal"] = signals[crypto_to_analyze]['reason']
                    
                    # Bouton pour lancer l'analyse
                    if st.button("Analyser avec l'IA"):
                        with st.spinner("Analyse en cours par l'IA..."):
                            # Appel √† l'API IA
                            analysis = analyze_crypto_data(crypto_data, technical_data)
                            
                            if "erreur" not in analysis:
                                # Affichage des r√©sultats
                                col1, col2 = st.columns([2, 1])
                                
                                with col1:
                                    # Afficher la recommandation de mani√®re bien visible
                                    recommandation = analysis.get("recommandation", "ind√©termin√©e")
                                    rec_color = "green" if recommandation == "acheter" else "red" if recommandation == "vendre" else "orange"
                                    
                                    st.markdown(f"""
                                    <div style='background-color: rgba({
                                    '0, 128, 0' if recommandation == 'acheter' else 
                                    '255, 0, 0' if recommandation == 'vendre' else 
                                    '255, 165, 0'
                                    }, 0.2); padding: 20px; border-radius: 5px;'>
                                    <h2 style='color: {rec_color}; margin: 0;'>Recommandation: {recommandation.upper()}</h2>
                                    <p>Niveau de risque: {'‚≠ê' * int(analysis.get('niveau_risque', 3))}</p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                    
                                    st.subheader("R√©sum√©")
                                    st.write(analysis.get("resume", ""))
                                    
                                    st.subheader("Analyse du March√©")
                                    st.write(analysis.get("analyse_marche", ""))
                                    
                                    st.subheader("Analyse Technique")
                                    st.write(analysis.get("analyse_technique", ""))
                                
                                with col2:
                                    st.subheader("Perspectives")
                                    
                                    st.markdown("**Court terme (1-7 jours)**")
                                    st.write(analysis.get("perspectives_court_terme", ""))
                                    
                                    st.markdown("**Moyen terme (1-3 mois)**")
                                    st.write(analysis.get("perspectives_moyen_terme", ""))
                                
                                # Ajouter un timestamp pour l'analyse
                                st.caption(f"Analyse g√©n√©r√©e le {datetime.fromisoformat(analysis.get('timestamp', datetime.now().isoformat())).strftime('%d/%m/%Y √† %H:%M')}")
                            else:
                                st.error(f"√âchec de l'analyse IA: {analysis.get('erreur', 'Erreur inconnue')}")
                else:
                    st.error(f"Aucune donn√©e disponible pour {crypto_to_analyze}")
            else:
                st.warning("Veuillez s√©lectionner une cryptomonnaie √† analyser")
        
        with ai_tabs[1]:
            st.subheader("Sentiment Global du March√©")
            
            if st.button("Analyser le sentiment du march√©"):
                with st.spinner("Analyse du sentiment du march√© en cours..."):
                    # Appel √† l'API IA pour le sentiment du march√©
                    sentiment = get_market_sentiment()
                    
                    if "erreur" not in sentiment:
                        # Affichage du sentiment global
                        sentiment_global = sentiment.get("sentiment_global", "neutre")
                        sentiment_color = "green" if sentiment_global == "haussier" else "red" if sentiment_global == "baissier" else "gray"
                        
                        st.markdown(f"""
                        <div style='background-color: rgba({
                        '0, 128, 0' if sentiment_global == 'haussier' else 
                        '255, 0, 0' if sentiment_global == 'baissier' else 
                        '100, 100, 100'
                        }, 0.2); padding: 20px; border-radius: 5px;'>
                        <h2 style='color: {sentiment_color}; margin: 0;'>Sentiment du march√©: {sentiment_global.upper()}</h2>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Facteurs cl√©s
                        st.subheader("Facteurs Influen√ßant le March√©")
                        facteurs = sentiment.get("facteurs_cles", [])
                        for facteur in facteurs:
                            st.markdown(f"- {facteur}")
                        
                        # Cryptomonnaies prometteuses
                        st.subheader("Cryptomonnaies Prometteuses")
                        cryptos = sentiment.get("cryptos_prometteuses", [])
                        for crypto in cryptos:
                            st.markdown(f"- {crypto}")
                        
                        # Risques √† surveiller
                        st.subheader("Risques √† Surveiller")
                        risques = sentiment.get("risques_a_surveiller", [])
                        for risque in risques:
                            st.markdown(f"- {risque}")
                        
                        # Conseils g√©n√©raux
                        st.subheader("Conseils G√©n√©raux")
                        st.write(sentiment.get("conseils_generaux", ""))
                        
                        # Timestamp
                        st.caption(f"Analyse g√©n√©r√©e le {datetime.fromisoformat(sentiment.get('timestamp', datetime.now().isoformat())).strftime('%d/%m/%Y √† %H:%M')}")
                    else:
                        st.error(f"√âchec de l'analyse du sentiment: {sentiment.get('erreur', 'Erreur inconnue')}")
        
        with ai_tabs[2]:
            st.subheader("Strat√©gie d'Investissement Personnalis√©e")
            
            # Profil de risque
            risk_profile = st.radio(
                "Votre profil de risque",
                ["Conservateur", "Mod√©r√©", "Agressif"],
                index=1,
                horizontal=True,
                key="risk_profile_selector"
            )
            
            # Conversion du profil en anglais pour l'API
            risk_map = {"Conservateur": "conservative", "Mod√©r√©": "moderate", "Agressif": "aggressive"}
            
            # Portefeuille actuel (version simplifi√©e)
            st.subheader("Votre portefeuille actuel")
            
            # Cr√©ation dynamique de champs pour le portefeuille
            portfolio = {}
            
            for i in range(5):  # Max 5 cryptos dans le portefeuille
                cols = st.columns([2, 2, 1])
                
                with cols[0]:
                    crypto = st.selectbox(
                        f"Crypto #{i+1}",
                        [""] + available_cryptos,
                        key=f"portfolio_crypto_{i}"
                    )
                
                if crypto:  # Seulement si une crypto est s√©lectionn√©e
                    with cols[1]:
                        amount = st.number_input(
                            f"Quantit√© de {crypto}",
                            min_value=0.0,
                            value=0.0,
                            key=f"portfolio_amount_{i}"
                        )
                    
                    with cols[2]:
                        if amount > 0:
                            portfolio[crypto] = amount
                            st.success("‚úì")
            
            # Bouton pour g√©n√©rer la strat√©gie
            if st.button("G√©n√©rer une strat√©gie d'investissement"):
                if portfolio:
                    with st.spinner("G√©n√©ration de la strat√©gie en cours..."):
                        # Appel √† l'API IA
                        strategy = generate_investment_strategy(portfolio, risk_map[risk_profile])
                        
                        if "erreur" not in strategy:
                            # Affichage de la strat√©gie
                            st.subheader("√âvaluation du Portefeuille")
                            st.write(strategy.get("evaluation_portefeuille", ""))
                            
                            st.subheader("Allocation Recommand√©e")
                            st.write(strategy.get("allocation_recommandee", ""))
                            
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                st.subheader("Cryptos √† Consid√©rer")
                                cryptos_to_add = strategy.get("cryptos_a_ajouter", [])
                                for crypto in cryptos_to_add:
                                    st.markdown(f"- {crypto}")
                            
                            with col2:
                                st.subheader("Cryptos √† Reconsid√©rer")
                                cryptos_to_sell = strategy.get("cryptos_a_vendre", [])
                                for crypto in cryptos_to_sell:
                                    st.markdown(f"- {crypto}")
                            
                            st.subheader("Strat√©gie √† Court Terme")
                            st.write(strategy.get("strategie_court_terme", ""))
                            
                            st.subheader("Strat√©gie √† Long Terme")
                            st.write(strategy.get("strategie_long_terme", ""))
                            
                            st.subheader("Gestion des Risques")
                            st.write(strategy.get("gestion_risques", ""))
                            
                            # R√©sum√©
                            st.subheader("R√©sum√© de la Strat√©gie")
                            st.info(strategy.get("resume", ""))
                            
                            # Timestamp
                            st.caption(f"Strat√©gie g√©n√©r√©e le {datetime.fromisoformat(strategy.get('timestamp', datetime.now().isoformat())).strftime('%d/%m/%Y √† %H:%M')}")
                        else:
                            st.error(f"√âchec de la g√©n√©ration de strat√©gie: {strategy.get('erreur', 'Erreur inconnue')}")
                else:
                    st.warning("Veuillez ajouter au moins une cryptomonnaie √† votre portefeuille")
        
        with ai_tabs[3]:
            st.subheader("Questions & R√©ponses")
            
            st.markdown("""
            Posez une question √† notre conseiller IA sp√©cialis√© en cryptomonnaies
            et obtenez une r√©ponse personnalis√©e bas√©e sur les connaissances les plus r√©centes.
            """)
            
            # Champ de texte pour la question
            user_question = st.text_area(
                "Votre question",
                height=100,
                placeholder="Exemple: Quelle est la diff√©rence entre Proof of Work et Proof of Stake?"
            )
            
            # Contexte suppl√©mentaire (optionnel)
            show_context = st.checkbox("Ajouter du contexte suppl√©mentaire")
            
            context = None
            if show_context:
                context_info = st.text_area(
                    "Contexte suppl√©mentaire (optionnel)",
                    height=100,
                    placeholder="Ajoutez ici des informations suppl√©mentaires pour mieux contextualiser votre question."
                )
                
                if context_info:
                    context = {"contexte_utilisateur": context_info}
            
            # Bouton pour poser la question
            if st.button("Poser la question") and user_question:
                with st.spinner("Traitement de votre question..."):
                    # Appel √† l'API IA
                    answer = ask_ai_advisor(user_question, context)
                    
                    # Affichage de la r√©ponse
                    st.markdown("### R√©ponse:")
                    st.markdown(answer)
                    
                    # Timestamp
                    st.caption(f"R√©ponse g√©n√©r√©e le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
            elif user_question == "":
                st.info("Veuillez entrer une question pour obtenir une r√©ponse.")

except Exception as e:
    st.error(f"Une erreur s'est produite: {str(e)}")
    st.info("Veuillez r√©essayer plus tard ou contacter l'administrateur si le probl√®me persiste.")
